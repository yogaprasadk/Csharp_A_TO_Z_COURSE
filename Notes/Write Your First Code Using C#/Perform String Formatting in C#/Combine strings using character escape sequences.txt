Character escape sequences:-
    An escape character sequence is an instruction to the runtime to insert a special   character that will affect the output of your string. In C#, the escape character sequence begins with a backslash \ followed by the character you're escaping. For example, the \n sequence will add a new line, and a \t sequence will add a tab.

    Example:-
    Console.WriteLine("Hello\nWorld!");
    Console.WriteLine("Hello\tWorld!");


Insert a  double-quotation mark in a literal string:-
     // error
     Console.Write("Hello World"!"");
     (1,27): error CS1003: Syntax error, ',' expected
     (1,27): error CS0103: The name 'World' does not exist in the current context
     (1,32): error CS1003: Syntax error, ',' expected

     To handle that situation, use the \" escape sequence:
     Console.Write("Hello \"hi Hello\" Machan");

use the backslash for other purposes, like to display a file path?
     //error
     Console.WriteLine("c:\source\repos");
     output: Unrecognized escape sequence

     The problem is the sequence \s. The \r doesn't produce an error because it's a valid escape sequence for a carriage return. However, you don't want to use a carriage return in this context.

     // to solve this problem we can use \\ 
     Console.WriteLine("c:\\source\\repos");


Verbatim string literal:
    A verbatim string literal will keep all whitespace and characters without the need to escape the backslash. 

    To create a verbatim string, use the @ directive before the literal string.
    
    Ex:
    Console.WriteLine(@"   c:\source\repos    
        (this is where your code goes)");

Unicode escape characters:
    You can also add encoded characters in literal strings using the \u escape sequence, then a four-character code representing some character in Unicode (UTF-16).
    
    Example:-
    // Kon'nichiwa World
    Console.WriteLine("\u3053\u3093\u306B\u3061\u306F World!");