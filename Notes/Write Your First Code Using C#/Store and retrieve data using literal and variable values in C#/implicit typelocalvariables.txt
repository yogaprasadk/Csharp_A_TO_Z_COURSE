    The C# compiler works behind the scenes to assist you as you write your code. It can infer your variable's data type by its initialized value. In this unit, you'll learn about this feature, called implicitly typed local variables

    An implicitly typed local variable is created by using the var keyword followed by a variable initialization.

    Ex: var message = "Hello world!";
    
    In this example, a string variable was created using the var keyword instead of the string keyword.

    The var keyword tells the C# compiler that the data type is implied by the assigned value. After the type is implied, the variable acts the same as if the actual data type had been used to declare it. The var keyword is used to save on keystrokes when types are lengthy or when the type is obvious from the context.

    Because the variable message is immediately set to the string value "Hello World!", the C# compiler understands the intent and treats every instance of message as an instance of type string.

    In fact, the message variable is typed to be a string and can never be changed. For example, consider the following code
    
    var message = "Hello World!";
    message = 10.703m;

    Error: (2,11): error CS0029: Cannot implicitly convert type 'decimal' to 'string'
   

   // Variables using the var keyword must be initialized
   var name;
   output: (1,5): error CS0818: Implicitly-typed variables must be initialized

   why var keyword is used in C#?
   The var keyword in C# is like a shortcut for telling the computer what type of data a variable will hold.

   Instead of writing the full type (like int or string), you can just use var, and the computer figures it out on its own based on what you put in it.

   At first, it's a good idea to use the full type name (like int or string) so you can be extra clear about what you're doing. But later, when you're comfortable, var makes things quicker and easier